import BSTree from "../06_二叉搜索树Tree/01_二叉搜索树BSTree";

const bst = new BSTree<number>()

console.log('----------insert-----')
bst.insert(11)
bst.insert(7)
bst.insert(15)
bst.insert(5)
bst.insert(3)
bst.insert(9)
bst.insert(8)
bst.insert(10)
bst.insert(13)
bst.insert(12)
bst.insert(14)
bst.insert(20)
bst.insert(18)
bst.insert(25)
bst.insert(6)
bst.print()



// console.log(bst.levelOrderTraverse())
// console.log(bst.preOrderTraverse())
// console.log(bst.inOrderTraverse())
// console.log(bst.postOrderTraverse())

// console.log('-----------search------')
// const cur = bst.search(13)
// console.log(`当前节点:${cur?.value} 父节点:${cur?.parent?.value}`)

console.log('-----------remove------')
// const cur = bst.search(7)
// const su = bst.successorNode(cur!)
// const pe = bst.predecessorNode(cur!)
// console.log(`后继节点:${su?.value}前驱节点${pe?.value}---${pe?.parent?.value}`)
// bst.remove(3)
// bst.print()
// bst.remove(6)
// bst.print()
// bst.remove(15)
// bst.print()
// bst.remove(11)
// bst.print()

// bst.remove2(3)
// bst.print()
// bst.remove2(6)
// bst.print()
// bst.remove2(15)
// bst.print()
// bst.removeNode(bst.root, 11)
// bst.remove(11)
// bst.print(bst.removeNode(bst.root, 11))
bst.remove2(11)
bst.print()

